// Generated by CoffeeScript 1.9.3
var MemoryHandler, RoomController, RoomPlanner, room, roomController,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MemoryHandler = (function() {
  MemoryHandler.prototype.roomController = null;

  MemoryHandler.prototype.memory = null;

  function MemoryHandler(memory, roomController1) {
    this.memory = memory;
    this.roomController = roomController1;
    if (this.memory['init'] == null) {
      this.init();
    }
  }

  MemoryHandler.prototype.init = function() {
    return this.memory['init'] = true;
  };

  MemoryHandler.prototype.getMemory = function(name) {
    if (this.memory[name] == null) {
      this.memory[name] = {};
    }
    return this.memory[name];
  };

  return MemoryHandler;

})();

RoomController = (function(superClass) {
  extend(RoomController, superClass);

  RoomController.prototype.room = null;

  function RoomController(room1) {
    this.room = room1;
    RoomController.__super__.constructor.call(this, this.room.memory, this);
    this.roomPlanner = new RoomPlanner(this.getMemory("RoomPlanner"), this);
  }

  RoomController.prototype.init = function() {
    return RoomController.__super__.init.apply(this, arguments);
  };

  RoomController.prototype.step = function() {
    return this.roomPlanner.plan();
  };

  return RoomController;

})(MemoryHandler);

RoomPlanner = (function(superClass) {
  extend(RoomPlanner, superClass);

  function RoomPlanner() {
    return RoomPlanner.__super__.constructor.apply(this, arguments);
  }

  RoomPlanner.prototype.init = function() {
    this.memory['setup'] = false;
    return RoomPlanner.__super__.init.apply(this, arguments);
  };

  RoomPlanner.prototype.plan = function() {
    return this.planMiners();
  };

  RoomPlanner.prototype.planMiners = function() {
    var sources;
    sources = this.roomController.room.find(global.FIND_SOURCES);
    return console.log(this.roomController.room + " , " + sources.length);
  };

  return RoomPlanner;

})(MemoryHandler);

console.log("Start Tick: " + Game.getUsedCpu());

room = Game.rooms["sim"];

roomController = new RoomController(room);

roomController.step();

console.log("Finished Tick: " + Game.getUsedCpu());
